/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class iqa_ms_ssim_args
 *
 * This file has been generated by dub 2.2.4.
 */
#include "dub/dub.h"
#include "iqa.h"


/** Set attributes (key, value)
 *
 */
static int iqa_ms_ssim_args__set_(lua_State *L) {

	iqa_ms_ssim_args *self = *((iqa_ms_ssim_args **)dub::checksdata_n(L, 1, "iqa.iqa_ms_ssim_args"));
	const char *key = luaL_checkstring(L, 2);
	int key_h = dub::hash(key, 7);

	switch (key_h) {
		case 1: {
			if (DUB_ASSERT_KEY(key, "wang")) break;

			self->wang = luaL_checkinteger(L, 3);
			return 0;
		}

		case 3: {
			if (DUB_ASSERT_KEY(key, "gaussian")) break;

			self->gaussian = luaL_checkinteger(L, 3);
			return 0;
		}

		case 2: {
			if (DUB_ASSERT_KEY(key, "scales")) break;

			self->scales = luaL_checkinteger(L, 3);
			return 0;
		}

		case 5: {
			if (DUB_ASSERT_KEY(key, "alphas")) break;

			dub::protect(L, 1, 3, "alphas");
			self->alphas = *((float **)dub::checksdata_n(L, 3, "float"));
			return 0;
		}

		case 0: {
			if (DUB_ASSERT_KEY(key, "betas")) break;

			dub::protect(L, 1, 3, "betas");
			self->betas = *((float **)dub::checksdata_n(L, 3, "float"));
			return 0;
		}

		case 4: {
			if (DUB_ASSERT_KEY(key, "gammas")) break;

			dub::protect(L, 1, 3, "gammas");
			self->gammas = *((float **)dub::checksdata_n(L, 3, "float"));
			return 0;
		}
	}

	if (lua_istable(L, 1))
		lua_rawset(L, 1);

	else
		luaL_error(L, KEY_EXCEPTION_MSG, key);

	return 0;
}

/** Get attributes (key)
 *
 */
static int iqa_ms_ssim_args__get_(lua_State *L) {

	iqa_ms_ssim_args *self = *((iqa_ms_ssim_args **)dub::checksdata_n(L, 1, "iqa.iqa_ms_ssim_args", true));
	const char *key = luaL_checkstring(L, 2);
	// <self> "key" <mt>
	// rawget(mt, key)
	lua_pushvalue(L, 2);
	// <self> "key" <mt> "key"
	lua_rawget(L, -2);

	if (!lua_isnil(L, -1)) {
		// Found method.
		return 1;
	} else {
		// Not in mt = attribute access.
		lua_pop(L, 2);
	}

	int key_h = dub::hash(key, 7);

	switch (key_h) {
		case 1: {
			if (DUB_ASSERT_KEY(key, "wang")) break;

			lua_pushnumber(L, self->wang);
			return 1;
		}

		case 3: {
			if (DUB_ASSERT_KEY(key, "gaussian")) break;

			lua_pushnumber(L, self->gaussian);
			return 1;
		}

		case 2: {
			if (DUB_ASSERT_KEY(key, "scales")) break;

			lua_pushnumber(L, self->scales);
			return 1;
		}

		case 5: {
			if (DUB_ASSERT_KEY(key, "alphas")) break;

			const float *retval__ = self->alphas;

			if (!retval__) return 0;

			dub::pushudata(L, const_cast<float*>(retval__), "float", false);
			return 1;
		}

		case 0: {
			if (DUB_ASSERT_KEY(key, "betas")) break;

			const float *retval__ = self->betas;

			if (!retval__) return 0;

			dub::pushudata(L, const_cast<float*>(retval__), "float", false);
			return 1;
		}

		case 4: {
			if (DUB_ASSERT_KEY(key, "gammas")) break;

			const float *retval__ = self->gammas;

			if (!retval__) return 0;

			dub::pushudata(L, const_cast<float*>(retval__), "float", false);
			return 1;
		}
	}

	return 0;
}

/** iqa_ms_ssim_args()
 *
 */
static int iqa_ms_ssim_args_iqa_ms_ssim_args(lua_State *L) {
	try {
		iqa_ms_ssim_args *retval__ = new iqa_ms_ssim_args();
		dub::pushudata(L, retval__, "iqa.iqa_ms_ssim_args", true);
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "new: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "new: Unknown exception");
	}

	return dub::error(L);
}



// --=============================================== __tostring
static int iqa_ms_ssim_args___tostring(lua_State *L) {
	iqa_ms_ssim_args *self = *((iqa_ms_ssim_args **)dub::checksdata_n(L, 1, "iqa.iqa_ms_ssim_args"));
	lua_pushfstring(L, "iqa.iqa_ms_ssim_args: %p", self);

	return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg iqa_ms_ssim_args_member_methods[] = {
	{ "__newindex", iqa_ms_ssim_args__set_ },
	{ "__index", iqa_ms_ssim_args__get_ },
	{ "new", iqa_ms_ssim_args_iqa_ms_ssim_args },
	{ "__tostring", iqa_ms_ssim_args___tostring },
	{ "deleted", dub::isDeleted       },
	{ NULL, NULL},
};


int luaopen_iqa_iqa_ms_ssim_args(lua_State *L)
{
	// Create the metatable which will contain all the member methods
	luaL_newmetatable(L, "iqa.iqa_ms_ssim_args");
	// <mt>

	// register member methods
	dub::fregister(L, iqa_ms_ssim_args_member_methods);
	// setup meta-table
	dub::setup(L, "iqa.iqa_ms_ssim_args");
	// <mt>
	return 1;
}
