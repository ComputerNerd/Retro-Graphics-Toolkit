/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library iqa
 *
 * This file has been generated by dub 2.2.4.
 */
#include "dub/dub.h"
#include "iqa.h"


extern "C" {
	int luaopen_iqa_iqa_ssim_args(lua_State *L);
	int luaopen_iqa_iqa_ms_ssim_args(lua_State *L);
}

/** float iqa_mse(const unsigned char *ref, const unsigned char *cmp, int w, int h, int stride)
 * inciqa/iqa.h:75
 */
static int iqa_iqa_mse(lua_State *L) {
	try {
		const unsigned char *ref = dub::checkstring(L, 1);
		const unsigned char *cmp = dub::checkstring(L, 2);
		int w = dub::checkinteger(L, 3);
		int h = dub::checkinteger(L, 4);
		int stride = dub::checkinteger(L, 5);
		lua_pushnumber(L, iqa_mse(ref, cmp, w, h, stride));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "iqa.iqa_mse: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iqa.iqa_mse: Unknown exception");
	}

	return lua_error(L);
}

/** float iqa_psnr(const unsigned char *ref, const unsigned char *cmp, int w, int h, int stride)
 * inciqa/iqa.h:89
 */
static int iqa_iqa_psnr(lua_State *L) {
	try {
		const unsigned char *ref = dub::checkstring(L, 1);
		const unsigned char *cmp = dub::checkstring(L, 2);
		int w = dub::checkinteger(L, 3);
		int h = dub::checkinteger(L, 4);
		int stride = dub::checkinteger(L, 5);
		lua_pushnumber(L, iqa_psnr(ref, cmp, w, h, stride));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "iqa.iqa_psnr: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iqa.iqa_psnr: Unknown exception");
	}

	return lua_error(L);
}

/** float iqa_ssim(const unsigned char *ref, const unsigned char *cmp, int w, int h, int stride, int gaussian, const struct iqa_ssim_args *args)
 * inciqa/iqa.h:108
 */
static int iqa_iqa_ssim(lua_State *L) {
	try {
		const unsigned char *ref = dub::checkstring(L, 1);
		const unsigned char *cmp = dub::checkstring(L, 2);
		int w = dub::checkinteger(L, 3);
		int h = dub::checkinteger(L, 4);
		int stride = dub::checkinteger(L, 5);
		int gaussian = dub::checkinteger(L, 6);
		iqa_ssim_args *args = *((iqa_ssim_args **)dub::checksdata(L, 7, "iqa.iqa_ssim_args"));
		lua_pushnumber(L, iqa_ssim(ref, cmp, w, h, stride, gaussian, args));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "iqa.iqa_ssim: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iqa.iqa_ssim: Unknown exception");
	}

	return lua_error(L);
}

/** float iqa_ms_ssim(const unsigned char *ref, const unsigned char *cmp, int w, int h, int stride, const struct iqa_ms_ssim_args *args)
 * inciqa/iqa.h:131
 */
static int iqa_iqa_ms_ssim(lua_State *L) {
	try {
		const unsigned char *ref = dub::checkstring(L, 1);
		const unsigned char *cmp = dub::checkstring(L, 2);
		int w = dub::checkinteger(L, 3);
		int h = dub::checkinteger(L, 4);
		int stride = dub::checkinteger(L, 5);
		iqa_ms_ssim_args *args = *((iqa_ms_ssim_args **)dub::checksdata(L, 6, "iqa.iqa_ms_ssim_args"));
		lua_pushnumber(L, iqa_ms_ssim(ref, cmp, w, h, stride, args));
		return 1;
	} catch (std::exception &e) {
		lua_pushfstring(L, "iqa.iqa_ms_ssim: %s", e.what());
	} catch (...) {
		lua_pushfstring(L, "iqa.iqa_ms_ssim: Unknown exception");
	}

	return lua_error(L);
}

// --=============================================== FUNCTIONS
static const struct luaL_Reg iqa_functions[] = {
	{ "iqa_mse", iqa_iqa_mse          },
	{ "iqa_psnr", iqa_iqa_psnr         },
	{ "iqa_ssim", iqa_iqa_ssim         },
	{ "iqa_ms_ssim", iqa_iqa_ms_ssim      },
	{ NULL, NULL},
};


DUB_EXPORT int luaopen_iqaLua(lua_State *L) {
	lua_newtable(L);
	// <lib>
	dub::fregister(L, iqa_functions);
	// <lib>

	luaopen_iqa_iqa_ssim_args(L);
	// <iqa.iqa_ssim_args>
	lua_setfield(L, -2, "iqa_ssim_args");

	luaopen_iqa_iqa_ms_ssim_args(L);
	// <iqa.iqa_ms_ssim_args>
	lua_setfield(L, -2, "iqa_ms_ssim_args");

	// <lib>
	return 1;
}
